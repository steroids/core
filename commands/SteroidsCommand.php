<?php

namespace steroids\core\commands;

use yii\console\Controller;
use yii\helpers\FileHelper;
use Yii;
use yii\helpers\Json;
use yii\helpers\Console;

class SteroidsCommand extends Controller
{
    public function actionUpdateTranslationKeys()
    {
        // Get all translation keys from backend by Yii message
        $this->stdout('Start update translations from backend', Console::FG_YELLOW, Console::BOLD);
        $this->stdout("\n");

        Yii::$app->runAction('message/extract', ['@app/config/messages.php']);

        $this->stdout('Start update translations from frontend', Console::FG_YELLOW, Console::BOLD);
        $this->stdout("\n");

        // Get all translation keys from frontend
        $files = FileHelper::findFiles(Yii::getAlias('@webroot/assets'), ['only' => ['*-lang.json']]);
        $translationKeys = [];
        $this->stdout('Extracting messages from ' . count($files) . " files...\n");
        foreach ($files as $file) {
            $translationKeys = array_merge($translationKeys, Json::decode(file_get_contents($file)));
        }
        $translationKeys = array_unique($translationKeys);

        $messagesPath = Yii::getAlias('@app/core/messages/');
        foreach (scandir($messagesPath) as $dir) {
            if (is_dir($messagesPath . $dir) && in_array($dir, Yii::$app->urlManager->languages)) {
                $translationFile = $messagesPath . $dir . '/app.php';
                if (is_writable($translationFile)) {
                    $currentTranslations = include $translationFile;
                    if (!$currentTranslations || $currentTranslations === 1) {
                        $currentTranslations = [];
                    }
                    $needAddTranslations = array_fill_keys(array_diff($translationKeys, array_keys($currentTranslations)), '');
                    if ($needAddTranslations) {
                        $this->stdout('Add messages from frontend to ');
                        $this->stdout($translationFile, Console::FG_BLUE);
                        $this->stdout("\n");

                        $this->echoNewTranslations($needAddTranslations);
                        $this->updateTranslation(array_merge($currentTranslations, $needAddTranslations), $translationFile);

                        $this->stdout('Done', Console::FG_GREEN);
                        $this->stdout("\n");
                    } else {
                        $this->stdout('No new translation keys for ');
                        $this->stdout($translationFile, Console::FG_BLUE);
                        $this->stdout("\n");
                    }
                }
            }
        }
    $this->stdout('Finish', Console::FG_YELLOW, Console::BOLD);
    }

    private function updateTranslation($translations, $translationFile)
    {
        if (is_writable($translationFile)) {
            $content = <<<EOT
<?php
/**
 * Message translations.
 *
 * This file is automatically generated by 'yii {$this->id}/{$this->action->id}' command.
 * It contains the localizable messages extracted from source code.
 * You may modify this file by translating the extracted messages.
 *
 * Each array element represents the translation (value) of a message (key).
 * If the value is empty, the message is considered as not translated.
 * Messages that no longer need translation will have their translations
 * enclosed between a pair of '@@' marks.
 *
 * Message string can be used with plural forms format. Check i18n section
 * of the guide for details.
 *
 * NOTE: this file must be saved in UTF-8 encoding.
 */
return [

EOT;
            foreach ($translations as $key => $translation) {
                $content .= "\t'" . addslashes($key) . "' => ";
                $content .= $translation
                    ? "'" . addslashes($translation) . "'"
                    : "''";
                $content .= ",\n";
            }
            $content .= '];';
            file_put_contents($translationFile, $content);
        }
    }

    private function echoNewTranslations($translationKeys)
    {
        $this->stdout('New translation keys:', Console::FG_BLUE);
        $this->stdout("\n");
        foreach ($translationKeys as $translationKey => $translationValue) {
            echo "'{$translationKey}'\n";
        }
    }
}